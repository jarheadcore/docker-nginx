upstream phpfcgi {
  server ${UPSTREAM_SERVER};
}

include /data/conf/nginx/http-partials.d/*.conf;

# Sets a $real_scheme variable whose value is the scheme passed by the load
# balancer in X-Forwarded-Proto (if any), defaulting to $scheme.
# Similar to how the HttpRealIp module treats X-Forwarded-For.
map $http_x_forwarded_proto $real_scheme {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

server {
    listen 80 default_server;
    server_name $hostname;
    root /app/web;
    error_log /var/log/nginx/project_error.log;
    #access_log /var/log/nginx/project_access.log;
    access_log off;
    index index.php index.html;

    include /data/conf/nginx/ssl/ssl.conf;
    include /data/conf/nginx/security-headers.d/*.conf;
    include /data/conf/nginx/server-partials.d/*.conf;

    ###############
    ### Caching ###
    ###############

    # If the “Query String Caching” setting is set to Do not cache URLs with query strings or Cache URLs with query
    # strings as unique pages then use the following code.
    #- Blitz cache rewrite
    set $cache_path false;
    if ($request_method = GET) {
        # Blitz Setting | Do not cache URLs with query strings / Cache URLs with query strings as unique pages
        set $cache_path /cache/blitz/$host/$uri/$args/index.html;

        # Blitz Setting | Cache URLs with query strings as the same page
        # set $cache_path /cache/blitz/$host/$uri/index.html;
    }

    if ($args ~ "token=") {
        set $cache_path false;
    }

    ##################
    ### Conditions ###
    ##################

    # Issue a 301 Redirect for any URL with a trailing /
    rewrite ^/(.*)/$ $real_scheme://$host/$1 permanent;

    # Change // -> / for all URLs, so it works for our php location block, too
    merge_slashes off;
    rewrite (.*)//+(.*) $1/$2 permanent;

    ###################
    ### Compression ###
    ###################

    # Enable gzip compression.
    # Default: off
    gzip on;
    # Tell proxies to cache both the gzipped and regular version of a resource
    # whenever the client's Accept-Encoding capabilities header varies;
    # Avoids the issue where a non-gzip capable client (which is extremely rare
    # today) would display gibberish if their proxy gave them the gzipped version.
    # Default: off
    gzip_vary on;
    # Don't compress anything that's already small and unlikely to shrink much
    # if at all (the default is 20 bytes, which is bad as that usually leads to
    # larger files after gzipping).
    # Default: 20
    gzip_min_length 1024;
    # Compress data even for clients that are connecting to us via proxies,
    # identified by the "Via" header.
    # Default: off
    gzip_proxied any;

    # Compress all output labeled with one of the following MIME-types.
    # text/html is always compressed by gzip module.
    # Default: text/html
    gzip_types
        application/atom+xml
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rss+xml
        application/geo+json
        application/vnd.ms-fontobject
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        application/rdf+xml
        font/otf
        application/wasm
        image/bmp
        image/svg+xml
        text/cache-manifest
        text/css
        text/javascript
        text/plain
        text/markdown
        text/vcard
        text/calendar
        text/vnd.rim.location.xloc
        text/vtt
        text/x-component
        text/x-cross-domain-policy
        text/xml;
    # Compression level (1-9).
    # 5 is a perfect compromise between size and CPU usage, offering about
    # 75% reduction for most ASCII files (almost identical to level 9).
    # Default: 1
    gzip_comp_level 5;

    gzip_disable "MSIE [1-6]\.";

    #################
    ### Locations ###
    #################

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location = /robots.txt {
        try_files $uri $uri/ @rewrites;
        allow all;
        log_not_found off;
        access_log off;
    }

    location = /version.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    # Allow "Well-Known URIs" as per RFC 5785
    location ~* ^/.well-known/ {
        allow all;
    }

    # Block access to "hidden" files and directories whose names begin with a period
    location ~ (^|/)\. {
        return 403;
    }

    location ~ \..*/.*\.php$ {
        return 403;
    }

    # deny some known locations
    location ~ ^/(wp-admin|wp-login|xmlrpc|cronjstats\.php$) {
        return 403;
    }

    # Don't allow direct access to PHP files in the vendor directory
    location ~ /vendor/.*\.php$ {
        deny all;
        return 404;
    }

    # Media: images, icons, video, audio, HTC
    location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp3|mp4|ogg|ogv|webm|htc|webp)$ {
        try_files $uri $uri/ @rewrites;
        expires 4h; # four hours
        log_not_found off;
        add_header Pragma public;
        add_header Cache-Control "public";
        include /data/conf/nginx/security-headers.d/*.conf;
    }

    # Special treatment of webpack generated hashed files ((name).(hash)(.es5).js|css)
    location ~* '[0-9a-z]+\.[0-9a-z]{8}(\.es5)?\.(js|css)$' {
        try_files $uri $uri/ @rewrites;
        expires 1y; # one year
        log_not_found off;
        add_header Pragma public;
        add_header Cache-Control "public";
        include /data/conf/nginx/security-headers.d/*.conf;
    }

    location ~* \.(js|css)$ {
        try_files $uri $uri/ @rewrites;
        #expires 1d; # one day
        expires -1;
        log_not_found off;
        add_header Pragma public;
        add_header Cache-Control "public";
        include /data/conf/nginx/security-headers.d/*.conf;
    }

    # WebFonts
    location ~* \.(?:ttf|ttc|otf|eot|woff|woff2)$ {
        try_files $uri $uri/ @rewrites;
        expires 1M; # one month
        log_not_found off;
        add_header Pragma public;
        add_header Cache-Control "public";
      	include /data/conf/nginx/security-headers.d/*.conf;
    }

    location / {
        try_files $cache_path $uri $uri/ @rewrites;
        add_header Pragma public;
        add_header Cache-Control "public";
        include /data/conf/nginx/security-headers.d/*.conf;
    }

    location @rewrites {
        rewrite ^(/en|de|fr|es)?/(.*)$ $1/index.php?p=$2&$args? last;
    }

    location ~ [^/]\.php(/|$) {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        include /etc/nginx/fastcgi_params;

        # Block httpoxy attacks. See https://httpoxy.org/.
        fastcgi_param HTTP_PROXY "";

        set $realip $remote_addr;
        if ($http_x_forwarded_for ~ "^(\d+\.\d+\.\d+\.\d+)") {
            set $realip $1;
        }

        fastcgi_param HOST                    $host;
        fastcgi_param REQUEST_SCHEME          $real_scheme;
        fastcgi_param HTTP_X_REAL_IP          $realip;
        fastcgi_param HTTP_X_FORWARDED_FOR    $proxy_add_x_forwarded_for;
        fastcgi_param HTTP_X_FORWARDED_PROTO  $real_scheme;
        fastcgi_param REMOTE_ADDR             $realip;
        fastcgi_param SCRIPT_FILENAME         $document_root/index.php;
        fastcgi_param PATH_INFO               $fastcgi_path_info;
        fastcgi_intercept_errors              on;
        fastcgi_pass                          phpfcgi;

        # Don't allow browser caching of dynamically generated content
        add_header          Last-Modified $date_gmt;
        add_header          Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
        if_modified_since   off;
        expires             off;
        etag                off;

        # No FastCGI Cache
        fastcgi_cache_bypass  1;
        fastcgi_no_cache      1;

        include /data/conf/nginx/security-headers.d/*.conf;
    }
}
